[manifest]
version = "1.0.0"
priority = 999

[[patches]]
[patches.regex]
target = "card.lua"
# pattern = "(?<!get_poker_hand_info\\()G.hand.highlighted"
pattern = "([^o]\\(|[^(])(G.hand.highlighted)"
root_capture = '2'
position = 'at'
payload = 'Bakery_API.get_highlighted()'
times = 35

[[patches]]
[patches.regex]
target = "card.lua"
pattern = "G.STATE == G.STATES.SELECTING_HAND or G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK"
position = 'at'
payload = 'self.ability.name ~= "Cryptid" or ($0)'
times = 1

[[patches]]
[patches.regex]
target = "card.lua"
pattern = "G.hand:unhighlight_all\\(\\)"
position = 'at'
payload = 'Bakery_API.unhighlight_all()'
times = 2

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = "local stay_flipped = "
position = 'after'
payload = 'stay_flipped or '
times = 1

[[patches]]
[patches.regex]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "G.hand.highlighted"
position = 'at'
payload = 'Bakery_API.get_highlighted()'
times = 10

[[patches]]
[patches.regex]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "G.hand:unhighlight_all\\(\\)"
position = 'at'
payload = 'Bakery_API.unhighlight_all()'
times = 1

# Make locked charms not render the ?
[[patches]]
[patches.regex]
target = '=[SMODS _ "src/card_draw.lua"]'
pattern = 'then\n\s+local shared_sprite ='
position = 'before'
payload = 'and (self.ability.set ~= "BakeryCharm" or self.config.center.unlocked) '
times = 1

# Render charm unlock modal properly
[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = "card_center\\.set == 'Voucher' and localize\\('k_voucher'\\) or localize\\('k_joker'\\)"
position = 'at'
payload = "card_center.set == 'Voucher' and localize('k_voucher') or card_center.set == 'BakeryCharm' and localize('k_bakerycharm') or localize('k_joker')"
times = 1

# cont.
[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = 'G\.CARD_H, G\.P_CARDS\.empty, card_center'
position = 'before'
payload = "card_center.set == 'BakeryCharm' and G.CARD_W or "
times = 2

# cont.
[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = 'G\.j_locked'
position = 'before'
payload = "card_center.set == 'BakeryCharm' and G.BakeryCharm_locked or "
times = 1

# Put charms in shop
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.current_round.voucher = SMODS.get_next_vouchers()'
position = 'before'
match_indent = true
times = 1
payload = "G.GAME.current_round.Bakery_charm = Bakery_API.get_next_charms()\n"

# cont.
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'local vouchers_to_spawn = 0'
position = 'before'
match_indent = true
times = 1
payload = "Bakery_API.add_charms_to_shop()\n"

# cont.
[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = "local t2 = "
position = 'after'
times = 1
payload = "card.ability.set == 'BakeryCharm' and Bakery_API.equip_button(card) or "

# cont.
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "if card.area == G.shop_vouchers and G.shop_vouchers then --Add a redeem button"
position = 'before'
match_indent = true
times = 1
payload = '''
if card.area == G.shop_vouchers and G.shop_vouchers then
    base_attach.children.use_button = G.UIDEF.card_focus_button{
      card = card, parent = base_attach, type = 'buy',
      func = 'Bakery_can_equip', button = 'Bakery_equip_from_shop', card_width = card_width
    }
end
'''

# Create charm area
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'self.consumeables = CardArea('
position = 'before'
match_indent = true
times = 1
payload = "Bakery_API.create_charm_area()\n"

# Coin Charm
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = "([^)p])/(5)"
position = 'at'
root_capture = "2"
times = 7
payload = "Bakery_API.interest_scale()"

# cont.
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '>= (to_big)?\(5\)'
position = 'at'
times = 1
payload = ">= Bakery_API.interest_scale()"

# cont.
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = "key = 'interest', vars = \\{G\\.GAME\\.interest_amount, (5)"
position = 'at'
root_capture = '1'
times = 1
payload = 'Bakery_API.interest_scale(true)'

# Epitaph Charm
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "-- TARGET: add your own CardAreas for joker evaluation"
position = 'before'
match_indent = true
times = 1
payload = "t[#t + 1] = G.Bakery_charm_area"

# Down tag
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "-- TARGET: setting_blind effects"
position = "after"
match_indent = true
times = 1
payload = "Bakery_API.on_set_blind(G.GAME.blind)"

# Joker Display compat
[[patches]]
[patches.pattern]
target = '=[SMODS JokerDisplay "src/display_functions.lua"]'
pattern = "card_remove_ref(self)"
position = "after"
match_indent = true
times = 1
payload = "if Bakery_API.no_update_joker_display then return end"

# Sprint Challenge
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "local disabled = false"
position = "after"
match_indent = true
times = 1
payload = """
local Bakery_no_select = (G.GAME.modifiers.Bakery_Sprint_Big and type == 'Big') or (G.GAME.modifiers.Bakery_Sprint_Small and (not type or type == 'Small'))
if Bakery_no_select then disabled = true end
"""

[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = "button = 'select_blind'"
position = 'at'
times = 1
payload = "button = not Bakery_no_select and 'select_blind' or nil"

# Maximus Compatibility
[[patches]]
[patches.pattern]
target = '=[SMODS Maximus "main.lua"]'
pattern = "if #parts._3 < 1 or #parts._2 < 2 or #hand < 5 then return {} end"
position = "at"
match_indent = true
times = 1
payload = """
local val = {}
if #parts._3 < 1 or #parts._2 < 2 or #hand < 5 then
  val = {}
else
  val = parts._all_pairs
end
if true then return Bakery_API.maximus_full_house_compat(parts, val) end
"""

# Mystes' Open Jokers Compatibility
[[patches]]
[patches.pattern]
target = '=[SMODS MystesMod "MystesMod.lua"]'
pattern = "function get_flush(hand)"
position = "before"
match_indent = true
times = 1
payload = "if false then -- Reimplemented by Bakery"

[[patches]]
[patches.pattern]
target = '=[SMODS MystesMod "MystesMod.lua"]'
pattern = "local add_to_deckref = Card.add_to_deck"
position = "before"
match_indent = true
times = 1
payload = "end"

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''local four_fingers = next(find_joker('Four Fingers'))'''
position = "at"
payload = '''local four_fingers = next(find_joker('Four Fingers')) or next(find_joker('Four Finger Discount'))'''
match_indent = true
overwrite = true
times = 2

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''local can_skip = next(find_joker('Shortcut'))'''
position = "at"
payload = '''local can_skip = next(find_joker('Shortcut')) or next(find_joker('Four Finger Discount'))'''
match_indent = true
overwrite = true
times = 1

# SMODS > 1.0.0~BETA-0423c compat
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = '''SMODS.calculate_effect_table_key(effect_table, 'individual', card, ret)'''
position = 'after'
payload = '''
for _, key in ipairs(Bakery_API.tag_effect_names) do
    SMODS.calculate_effect_table_key(effect_table, key, card, ret)
end
'''
match_indent = true
times = 1
